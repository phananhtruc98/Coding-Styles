Danh sách biến dài
* Dấu hiệu nhận biết
- Hơn ba hoặc bốn biến trong một phương thức

* Lý do của những vấn đề này
- Một danh sách các biến dài có thể có khi sau một vài loại thuật toán được gộp trong một phương thức. Danh sách này có thể được tạo để điều khiển thuật toán sẽ được chạy.
- Một danh sách biến dài có thể là tác dụng phụ của những nỗ lực làm cho class độc lập hơn so với các class khác. Ví dụ, code để tạo một object xác định trong một phương thức được di chuyển từ phương thức đến code mà gọi phương thức đó, nhưng object được tạo được truyền qua phương thức như một biến. Do đó class gốc không biết về mối quan hệ giữa các object, và giảm sự phụ thuộc nhau. Nhưng nếu vài object này được tạo, mỗi cái trong đó sẽ yêu cầu biến của riêng nó, ý là một danh sách biến dài hơn.
- Nó hơi khó hiểu và hơi mâu thuẫn và khó để sử dụng khi mà cái danh sách biến này nó dài hơn. Thay vì sử dụng một đống biến, thì một phương thức có thể sử dụng một object với các property như các biến. Nếu object hiện tại không chứa tất cả những dữ liệu cần thiết, một object khác ( mà chứa những dữ liệu cần thiết) có thể được truyền thông qua tham số phương thức.

* Cách khắc phục
- Kiểm tra giá trị nào được truyền bến tham số. Nếu một số đối số chỉ là kết quả của các lệnh gọi phương thức của đối tượng khác, sử dụng Preserve Whole Object.
- Nếu có một vài thành phần dữ liệu không liên quan, đôi khi bạn có thể gộp chúng chung một object tham số duy nhất, tham khảo Introduce Parameter Object(https://refactoring.guru/introduce-parameter-object) nhé

* Cái mình nhận lại được:
- Dễ đọc, code ngắn hơn
- Refactor dễ phát hiện code bị trùng lặp mà chưa biết trước đó.


* Khi nào thì nên bỏ qua việc này
- Đừng loại bỏ các tham số vì nếu như vậy sẽ gây ra sự phụ thuộc không mong muộn giữa các lớp.

