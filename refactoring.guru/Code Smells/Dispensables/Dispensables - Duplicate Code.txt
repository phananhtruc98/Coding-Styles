Code bị trùng
* Dấu hiệu nhận biết
Hai phần code nhìn tương đối giống nhau.
* Lý do của những vấn đề này
Code lặp lại thường hay xảy ra khi nhiều dev đang làm phần khác nhau của một dự án cùng một lúc. Họ làm hai nhiệm vụ khác nhau, họ không biết là đồng nghiệp của họ đã viết cái code mà code đó có cùng mục đích như code mà bạn viết.
- Có một số trường hợp tế nhị về việc trùng code, khi mà một phần code nhìn thì khác nhưng thật sự là nó đang làm cùng một công việc. Những kiểu như thế này thì rất khó để kiếm ra và fix 
- Đôi khi, trùng code là có mục đích. Khi tới deadline và code hiện tại thì 'khá đúng' cho cái task đó, những người lập trình viên mới không thể chống cự lại với việc copy và dán code liên quan vô. Và trong một vài trường hợp, người lập trình viên đơn giản là lười làm cho code bớt lộn xộn.
* Cách khắc phục
- Nếu thấy code giống nhau trong hai hoặc nhiều phương thức trong cùng một lớp: sử dụng Extract Method(https://refactoring.guru/extract-method) và thay thế bằng phương thức mới ở cả hai nơi.
- Nếu code giống ở hai lớp con cùng cấp:
	+ Sử dụng Extract Method(https://refactoring.guru/extract-method) cho cả hai lớp, kế tiếp sử dụng Pull Up Field(https://refactoring.guru/pull-up-field) cho trường được sử dụng trong phương thức mà bạn kéo về.
	+ Nếu code trùng ở trong hàm khởi tạo, sử dụng Pull Up Constructor Body(https://refactoring.guru/pull-up-constructor-body).
	+ Nếu code trùng nhưng không giống hệt nhau, sử dụng Form Template Method(https://refactoring.guru/form-template-method).
	+ Nếu hai phương thức làm cùng một chức năng nhưng sử dụng khác thuật toán, chọn thuật toán tốt nhất và áp dụng Substitute Algorithm(https://refactoring.guru/substitute-algorithm).
- Nếu code trùng ở hai lớp khác nhau:
	+ Nếu lớp không có kế thừa nhau, sử dụng Extract Superclass(https://refactoring.guru/extract-superclass) để tạo một lớp cha cho những lớp trên kế thừa để duy trì tất cả chức năng trước đó.
	+ Nếu khó hoặc không thể tạo lớp cha, sử dụng Extract Class(https://refactoring.guru/extract-class) trong cùng một lớp và sử dụng một thành phần mới trong lớp còn lại.
- Nếu một lương lớn biểu thức chính quy thể hiện trong cùng đoạn code (chỉ khác nhau điều kiện của nó), gộp những toán tử đó lại thành 1 điều kiện duy nhất bằng cách sử dụng Consolidate Conditional Expresion(https://refactoring.guru/consolidate-conditional-expression) và sử dụng Extract Method(https://refactoring.guru/extract-method) để thay thế điều kiện đó trong phương thức riêng biệt với cái tên phương thức dễ hiểu.
- Nếu code giống nhau thể hiện ở nhiều nhánh của một biểu thức chính quy: thay thế code giống hệt nhau đó ở ngoài cây điều kiện bằng cách sử dụng Consolidate Duplicate Conditional Fragments(https://refactoring.guru/consolidate-duplicate-conditional-fragments).
* Cái mình nhận lại được
- Gộp code trùng làm đơn giản hóa cấu trúc code và làm code ngắn gọn hơn.
- Đơn giản hóa + ngắn gọn = code đơn giản và dễ hiểu, dễ bảo trì
* Khi nào thì nên bỏ qua việc này
- Trong rất nhiều trường hợp, gộp những đoạn code giống hệt nhau làm cho code không trực quan và không rõ ràng.